---
description: 
globs: 
alwaysApply: true
---
# Effect Crypto Project Rules

## Description
This rule defines the core project structure and coding standards for the Effect Crypto project, a TypeScript monorepo using Effect for functional programming and blockchain integration.

## File Patterns
# Refined patterns to focus on core TypeScript source and test files
- `packages/*/src/**/*.ts`
- `packages/*/src/**/*.ts`
# Added pattern for Solidity contracts
- `packages/sol-artifacts/contracts/**/*.sol`

### Project Structure

**Root Directory:**
- The project is a TypeScript monorepo managed with npm workspaces.
- Key configuration files at the root include:
  - `package.json`: Defines workspaces and root dependencies.
  - `tsconfig.json`: Root TypeScript configuration, often references `tsconfig.base.json`.
  - `tsconfig.base.json`: Base TypeScript settings inherited by packages.
  - `eslint.config.mjs`: ESLint configuration.
  - `.prettierrc.js`: Prettier code formatting rules.
  - `.nvmrc`: Specifies the required Node.js version.
  - `README.MD`: Project overview and setup instructions.
  - `.github/workflows/`: Continuous integration (CI) workflows (e.g., `typescript-ci.yml`).
  - `.run/`: IDE run configurations (e.g., for tests, localnet).

**Packages Directory (`packages/`):**
- Contains individual workspaces/packages (e.g., `effect-crypto`, `effect-crypto-uniswap`, `sol-artifacts`).
- Each package typically includes:
  - `package.json`: Package-specific dependencies and scripts. **Note the `name` field here is used for workspace commands.**
  - `tsconfig.json`: Package-specific TypeScript configuration, extending the root `tsconfig.base.json`.
  - `ava.config.mjs`: Configuration for the AVA test runner (if applicable, like in `effect-crypto` and `effect-crypto-uniswap`).
  - `src/`: Source code directory.
    - `index.ts`: Main entry point for public exports.
    - Module files (e.g., `src/price.ts`, `src/order.ts`): Define specific functionalities.
      - Each module typically consists of 3 files (use `price` as an example):
        - Public API (definitions only): `price.ts`
        - Implementation `price.internal.ts`, all exported members should be annotated with `@internal`
        - Test files (e.g., `src/price.spec.ts`): Tests colocated with the source files they test.
      - Module is exported under the namespace from `index.ts` file. The only exception is `src/adt.ts` it exported on the top level of `index.ts`
  - `dist/`: Compiled JavaScript output directory (generated by `tsc`).
  - Specific configuration for certain package types:
    - `sol-artifacts`: Contains Solidity contracts (`contracts/`), Hardhat configuration (`hardhat.config.cjs`), and compiled artifacts (`artifacts/`, `dist/`).

## **IMPORTANT: Development Workflow**

When developing new features or making changes, follow this iterative process:

1.  **Implement Changes:** Write or modify the necessary code in the relevant package(s) (e.g., within `packages/effect-crypto/src`).
2.  **Compile Package:** Build the specific package you are working on to check for TypeScript errors. Run this command from the **root directory**. Use the package **name** defined in its `package.json` (e.g., `@liquidity_lab/effect-crypto`):
    ```bash
    # Example for the 'effect-crypto' package (name: @liquidity_lab/effect-crypto)
    npm run build -w @liquidity_lab/effect-crypto
    ```
    Alternatively, navigate into the package directory and run its build script:
    ```bash
    cd packages/effect-crypto
    npm run build
    cd ../.. # Go back to root
    ```
3.  **Fix Compilation Errors:** If the build fails, address the TypeScript errors reported by the compiler. Repeat steps 1 and 2 until the package compiles successfully.
4.  **Run Tests:** Execute the tests for the modules you have modified using AVA. Ensure you are using the correct Node.js version specified in `.nvmrc`. Target the specific test file(s) relevant to your changes for faster feedback. Run the test command from the **root directory**:
    ```bash
    nvm use # Ensure correct Node version
    # Example: Run tests for src/price.spec.ts in effect-crypto package
    node --import tsx node_modules/ava/entrypoints/cli.mjs -v packages/effect-crypto/src/price.spec.ts
    ```
5.  **Fix Test Errors:** If any tests fail, debug the issues in your code or tests. Repeat the cycle (steps 1-4) until all relevant tests pass and the package builds without errors.
6.  **Check & Fix Code Style:** Run the linters and formatters to ensure code adheres to the project's style guide. Execute these commands from the **root directory**:
    ```bash
    # Run ESLint to check for style and potential errors
    npm run lint
    # Run Prettier to automatically format code
    npm run codestyle:fix
    ```
    If any linting errors are reported or formatting changes are made by Prettier, review them. If code logic was changed during fixes, you might need to repeat steps 2-5 to ensure everything still compiles and passes tests.
7.  **Build Entire Monorepo:** After confirming the individual package is correct and styled properly, compile the entire monorepo to check for cross-package compatibility and integration issues. Run this command from the **root directory**:
    ```bash
    npm run build # This typically builds all workspaces
    ```
    If errors occur during the full build, identify the package(s) causing the issues. Return to step 1 for each problematic package, applying the development workflow (steps 1-6) to resolve the errors package by package.

**Only proceed once the individual package builds, its tests pass, the code style is correct, AND the entire monorepo builds successfully.** This comprehensive process ensures code quality, correctness, and proper integration before finalizing changes.

### Code Style
- Use strict TypeScript type checking
- Document all public exports with JSDoc comments
- Add file name (with path from the repo-root) at the beggining of each file
- Format type signatures consistently:
  ```typescript
  /**
   * docs with examples
   */
  export const makePrice: {
    (raw: bigint): Price; // type signature
  } = internal.makePriceImpl;
  ```
- Follow Effect library patterns and conventions
- Use immutable data structures
- Prefer pure functions
- Use Effect's error handling mechanisms

### Imports
- Use absolute imports with namespaces within packages:
  ```typescript
  import * as Price from "./price.js";
  ```
- Avoid relative imports beyond one level deep
- Use explicit file extensions (`.js` for imports, even when importing `.ts` files after compilation)

### Testing
- Use AVA as the test runner (`ava.config.mjs`)
- Implement property-based testing with fast-check
- Test files (`*.spec.ts`) must be colocated with their corresponding module files within the `src` directory.
- Avoid using nested conditions to assert result when possible
- Use `actual` and `expected` naming when possible
- Use `Either.getOrElse` or `Option.getOrElse` in combination with `t.fail("detailed message")` in order to avoid code-nesting and fail-fast:
  ```typescript
  import { Option } from 'effect';

  test("My test case", (t) => {
    const value: Option.Option<{ myClass: string }> = /* ??? */;

    const someValue = Option.getOrElse(
      value,
      () => t.fail("detailed error description"),
    )
  });
  ```
- Run tests with Node.js v22+:
  ```bash
  nvm use v22 # Ensure correct Node version from .nvmrc
  node --import tsx node_modules/ava/entrypoints/cli.mjs -v path/to/your.spec.ts --timeout 2m
  ```

### Blockchain Integration
# Added details about sol-artifacts package
- Use Hardhat for local blockchain development, configured in `packages/sol-artifacts/hardhat.config.cjs`.
- Solidity contracts are located in `packages/sol-artifacts/contracts/`.
- Support Arbitrum network.
- Follow Uniswap v3 integration patterns (primarily within `effect-crypto-uniswap` package).
- Use proper error handling for blockchain interactions.

### Security
- Never commit API keys or sensitive credentials (check `.gitignore`)

### Error Handling
- Use Effect's error handling mechanisms (defined in `effect-crypto/src/error.ts`)
- Provide meaningful error messages
- Handle blockchain-specific errors appropriately
- Log errors appropriately

### Dependencies
- Keep dependencies up to date
- Use specific versions in `package.json`
- Document any dependency-specific configurations
- Follow the project's dependency management strategy (npm workspaces)

